[=|=|"botonCustomCategoria.vue"|=|=]
<script>
export default
{
  name: 'botonCustomCategoria',
  emits: [ 'click', 'editar', 'eliminar' ],
  props:
  {
    emoji: { type: String, default: '' },
    label: { type: String, default: '' },
    editable: { type: Boolean, default: false },
  },
  data()
  {
    return { hover: false }
  },
  computed:
  {
    mostrarAcciones()
    {
      return this.editable && this.hover
    }
  },
}
</script>

<template>
  <div class="wrapperCAT" @mouseenter="hover = true" @mouseleave="hover = false">
    <button class="botonCAT" @click="$emit('click')">
      <span v-if="emoji" class="emojiCAT">{{ emoji }}</span>
      <span v-if="label" class="labelCAT">{{ label }}</span>
    </button>
    <div v-if="mostrarAcciones" class="accionesCAT">
      <span class="iconoCAT" @click.stop="$emit('editar')">âœï¸</span>
      <span class="iconoCAT" @click.stop="$emit('eliminar')">âŒ</span>
    </div>
  </div>
</template>

[=|=|"funciones.js"|=|=]
export function inicializarSlate() {
  if (localStorage.getItem('slateColumnas') === null) localStorage.setItem('slateColumnas', '{}')
  if (localStorage.getItem('slateRegistros') === null) localStorage.setItem('slateRegistros', '[]')
  if (localStorage.getItem('slateCategorias') === null) localStorage.setItem('slateCategorias', '{}')
  if (localStorage.getItem('slateOpciones') === null)
    localStorage.setItem('slateOpciones', JSON.stringify({
      csvDelimitador: ',',
      limiteBotones: 8,
      limiteEntradas: 15,
      sumarInicio: true,
    }))
}

export function toggleCategoria(key) { const columnas = obtenerColumnas()
  if (!columnas[key]) return columnas
  columnas[key].esCategoria = !columnas[key].esCategoria
  guardarColumnas(columnas)
  const cats = obtenerCategorias()
  if (columnas[key].esCategoria) {
    const regs = obtenerRegistros()
    const unicas = [...new Set(regs.map(r => r[key]).filter(v => v))]
    cats[key] = cats[key] || {}
    unicas.forEach(name => { if (!cats[key][name]) { cats[key][name] = { nombre: name, emoji: 'ðŸ“', vinculada: true }}})} else { delete cats[key] }
  guardarCategorias(cats)
  return { columnas, cats }
}

// getters localstorage

export function obtenerRegistros() { return JSON.parse(localStorage.getItem('slateRegistros') || '[]') }
export function obtenerColumnas() { return JSON.parse(localStorage.getItem('slateColumnas') || '{}') }
export function obtenerCategorias() { return JSON.parse(localStorage.getItem('slateCategorias') || '{}') }
export function obtenerOpciones() { return JSON.parse(localStorage.getItem('slateOpciones') || '{}') }
export function obtenerDelimitador() { return obtenerOpciones().csvDelimitador || ',' }
export function obtenerLimiteEntradas() { return obtenerOpciones().limiteEntradas || 12 }
export function obtenerLimiteBotones() { return obtenerOpciones().limiteBotones || 12 }
export function obtenerPagina(arr, pagina, limite) { const inicio = pagina * limite; return arr.slice(inicio, inicio + limite) }


// setters localstorage

export function guardarRegistros(registros) { localStorage.setItem('slateRegistros', JSON.stringify(registros)) }
export function guardarColumnas(columnas) { localStorage.setItem('slateColumnas', JSON.stringify(columnas)) }
export function guardarCategorias(categorias) { localStorage.setItem('slateCategorias', JSON.stringify(categorias)) }
export function guardarOpciones(opciones) { localStorage.setItem('slateOpciones', JSON.stringify(opciones)) }

// mergers localstorage

export function sumarOpcion(opcion) { localStorage.setItem('slateOpciones', JSON.stringify({ ...obtenerOpciones(), ...opcion })) }
export function agregarRegistro(registro) { const regs = obtenerRegistros(); regs.unshift(registro); guardarRegistros(regs); return regs }

// editar localstorage

export function editarRegistro(index, cambios) { const regs = obtenerRegistros(), original = regs.at(index)
  if (!original) { throw new Error('Ã­ndice de registro invÃ¡lido') }
  const actualizado = { ...original, ...cambios }
  regs.splice(index, 1, actualizado)
  guardarRegistros(regs)
  return regs
}

export function editarColumna(key, prop, valor) {
  const columnas = obtenerColumnas()
  if (!columnas[key]) return columnas
  columnas[key][prop] = valor
  guardarColumnas(columnas)
  return columnas
}

export function editarCategoria(colKey, name, nuevosProps) { const cats = obtenerCategorias()
  if (!cats[colKey] || !cats[colKey][name]) return cats
  cats[colKey][name] = { ...cats[colKey][name], ...nuevosProps }
  guardarCategorias(cats)
  return cats
}

// renombrar localstorage

export function renombrarColumna(keyOld, keyNew) { const columnas = obtenerColumnas()
  if (!columnas[keyOld] || columnas[keyNew]) { return { columnas, regs: obtenerRegistros() } }
  const newColumnas = {}
  Object.keys(columnas).forEach(key => {
    if (key === keyOld) { newColumnas[keyNew] = { ...columnas[keyOld], nombre: keyNew } }
    else { newColumnas[key] = columnas[key] }
  })
  guardarColumnas(newColumnas)
  const cats = obtenerCategorias()
  if (cats[keyOld]) { cats[keyNew] = { ...cats[keyOld] }; delete cats[keyOld]; guardarCategorias(cats) }
  const regs = obtenerRegistros().map(r => { const nuevo = {}
    Object.keys(newColumnas).forEach(colKey => { if (colKey === keyNew) { nuevo[colKey] = r[keyOld] } else { nuevo[colKey] = r[colKey] } })
    return nuevo
  } )
  guardarRegistros(regs)
  return { columnas: newColumnas, cats, regs }
}

export function renombrarCategoria(colKey, oldName, newName) {
  const cats = obtenerCategorias()
  if (!cats[colKey] || !cats[colKey][oldName] || cats[colKey][newName]) { return { cats: obtenerCategorias(), regs: obtenerRegistros() } }
  cats[colKey][newName] = { ...cats[colKey][oldName], nombre: newName }
  delete cats[colKey][oldName]
  guardarCategorias(cats)
  const regs = obtenerRegistros()
  regs.forEach(r => { if (r[colKey] === oldName) r[colKey] = newName })
  guardarRegistros(regs)
  return { cats, regs }
}

// eliminar localstorage

export function eliminarRegistro(index) { const regs = obtenerRegistros()
  if (index < 0 || index >= regs.length) { throw new Error('Ã­ndice de registro invÃ¡lido') }
  regs.splice(index, 1)
  guardarRegistros(regs)
  return regs
}

export function eliminarColumna(key) {
  const columnas = obtenerColumnas()
  delete columnas[key]
  guardarColumnas(columnas)
  const regs = obtenerRegistros().map(r => { const { [key]: _, ...rest } = r; return rest })
  guardarRegistros(regs)
  const cats = obtenerCategorias()
  delete cats[key]
  guardarCategorias(cats)
  return { columnas, regs, cats }
}

export function eliminarCategoria(colKey, name) { const cats = obtenerCategorias()
  if (!cats[colKey] || !cats[colKey][name]) { return { cats: obtenerCategorias(), regs: obtenerRegistros() } }
  delete cats[colKey][name]
  if (Object.keys(cats[colKey]).length === 0) { delete cats[colKey] }
  guardarCategorias(cats)
  const regs = obtenerRegistros().filter(r => r[colKey] !== name)
  guardarRegistros(regs)
  return { cats, regs }
}

export function eliminarFila(fila) {
  const registros = obtenerRegistros()
  const index = registros.findIndex(r => testIgualdad(r, fila))
  if (index === -1) return false
  eliminarRegistro(index)
  return true
}

// funciones csv

export function csvValidar(file) {
  if (!file) return false
  const mime = file.type.toLowerCase()
  const ext = file.name.toLowerCase().endsWith('.csv')
  return mime === 'text/csv' || ext
}

export function csvParse(file) {
  return new Promise((resolve, reject) => {
  const reader = new FileReader()
    reader.onload = eventoLectura => {
      const texto = eventoLectura.target.result.trim()
      const lineas = texto.split(/\r?\n/).map(l => l.split(obtenerDelimitador())) // separar por lineas y por delimitador
      const [header, ...rows] = lineas // separar header de filas
      const filas = rows.map(celdas => csvSubParse(celdas)) // procesamos cada fila con funcion sub-parse
      resolve({ header, rows: filas }) // devolver objeto con header y filas
    }
    reader.onerror = reject
    reader.readAsText(file)
  })
}

export function csvSubParse(celdas) { return celdas } // funcion para procesar cada linea internamente +++

export async function csvSubir(file) {
  if (!csvValidar(file)) throw new Error("The file you're trying to upload is not a valid csv, or its mimetype is incorrect.")
  const { header, rows } = await csvParse(file)
    const columnas = Object.fromEntries(header.map(nombreColumna => [nombreColumna.trim(), { nombre: nombreColumna.trim() }]))
    const registros = rows.map(row => {
      const entrada = Object.fromEntries(header.map((nombreColumna, i) => {
        const valor = row[i]?.trim() || ''
        return [ nombreColumna.trim(), valor ]}))
      return entrada
    })
    localStorage.setItem('slateColumnas', JSON.stringify(columnas))
    localStorage.setItem('slateRegistros', JSON.stringify(registros))
}

export async function csvSumar(file) {
  if (!csvValidar(file)) throw new Error("The file you're trying to upload is not a valid csv, or its mimetype is incorrect.")
  const { header, rows } = await csvParse(file)
  const nuevasColumnas = header.map(c => c.trim())
  const nuevosRegistros = rows.map(row =>Object.fromEntries(header.map((c, i) => [c.trim(), row[i]?.trim() || ''])))
  const viejasColumnasObj = obtenerColumnas()
  const viejosRegistros   = obtenerRegistros()
  const viejasColumnas = Object.keys(viejasColumnasObj)
  nuevasColumnas.forEach(c => {if (!viejasColumnas.includes(c)) {viejasColumnasObj[c] = { nombre: c }}})
  const sumarInicio = obtenerOpciones().sumarInicio === true
  const combinados = sumarInicio
    ? [...nuevosRegistros, ...viejosRegistros]
    : [...viejosRegistros, ...nuevosRegistros]
  const todasClaves = Object.keys(viejasColumnasObj)
  const normalizado = combinados.map(reg => {
    const r = {}
    todasClaves.forEach(k => {r[k] = reg[k] ?? ''})
    return r
  })
  localStorage.setItem('slateColumnas',  JSON.stringify(viejasColumnasObj))
  localStorage.setItem('slateRegistros', JSON.stringify(normalizado))
}

export function csvBajar() {
  const registros = obtenerRegistros()
  if (!registros.length) return
  const encabezado = Object.keys(registros[0]).join(obtenerDelimitador())
  const filas = registros.map(registro => Object.values(registro).join(obtenerDelimitador()))
  const csv = [encabezado, ...filas].join('\r\n')
  const blob = new Blob([csv], {type: 'text/csv'})
  const url = URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = 'slateRegistros.csv'
  a.click()
  URL.revokeObjectURL(url)
}

export function csvVaciar() {
  localStorage.setItem('slateRegistros', '[]')
  localStorage.setItem('slateColumnas', '{}')
  localStorage.setItem('slateCategorias', '{}')
}

export function testIgualdad(a, b) { 
  const claves = new Set([...Object.keys(a), ...Object.keys(b)])
  for (let clave of claves) { if (a[clave] !== b[clave]) return false } return true
}
[=|=|"botonArchivoBajar.vue"|=|=]
<script>
import { DocumentArrowDownIcon } from '@heroicons/vue/24/solid'
import { csvBajar } from '../funciones.js'
export default
{
  name: 'botonArchivoBajar',
  components: { DocumentArrowDownIcon },
  methods:
  {
    bajar() { csvBajar() }
  },
}
</script>

<template>
  <button type="button" class='botonUI' @click="bajar">
    <DocumentArrowDownIcon class="iconoUI" />
  </button>
</template>
[=|=|"botonArchivoSubir.vue"|=|=]
<script>
import { DocumentArrowUpIcon } from '@heroicons/vue/24/solid'
import { csvSubir } from '../funciones.js'
export default
{
  name: 'botonArchivoSubir',
  components: { DocumentArrowUpIcon },
  methods:
  {
    buscarArchivo() { this.$refs.fileInput.click() },
    manejarArchivo(event)
    {
      const file = event.target.files[0]
      event.target.value = ''
      if (!file) return
      csvSubir(file)
    },
  },
}
</script>

<template>
  <button type="button" class='botonUI' @click="buscarArchivo">
    <DocumentArrowUpIcon class="iconoUI" />
  </button>
  <input type="file" accept=".csv" ref="fileInput" @change="manejarArchivo" style="display: none;" />
</template>
[=|=|"botonArchivoSumar.vue"|=|=]
<script>
import { DocumentPlusIcon } from '@heroicons/vue/24/solid'
import { csvSumar } from '../funciones.js'
export default
{
  name: 'botonArchivoSumar',
  components: { DocumentPlusIcon },
  methods:
  {
    buscarArchivo() { this.$refs.fileInput.click() },
    manejarArchivo(event)
    {
      const file = event.target.files[0]
      event.target.value = ''
      if (!file) return
      csvSumar(file)
    },
  },
}
</script>

<template>
  <button type="button" class='botonUI' @click="buscarArchivo">
    <DocumentPlusIcon class="iconoUI" />
  </button>
  <input type="file" accept=".csv" ref="fileInput" @change="manejarArchivo" style="display: none;"/>
</template>
[=|=|"botonArchivoVaciar.vue"|=|=]
<script>
import { DocumentMinusIcon } from '@heroicons/vue/24/solid'
import { csvVaciar } from '../funciones.js'
export default 
{
  name: 'botonArchivoVaciar',
  components: { DocumentMinusIcon },
  methods:
  {
    vaciar() { csvVaciar() }
  },
}
</script>

<template>
  <button type="button" class='botonUI' @click="vaciar">
    <DocumentMinusIcon class="iconoUI" />
  </button>
</template>
[=|=|"botonFormularioCategoria.vue"|=|=]
<script>
import { PlusCircleIcon } from '@heroicons/vue/24/solid'
export default
{
  name: 'botonFormularioCategoria',
  components: { PlusCircleIcon },
  emits: ['cambiarVista'],
}
</script>

<template>
  <button type="button" class='botonUI' @click="$emit('cambiarVista', 'formularioCategoria')">
    <PlusCircleIcon class="iconoUI" />
  </button>
</template>
[=|=|"botonFormularioRegistro.vue"|=|=]
<script>
import { PlusCircleIcon } from '@heroicons/vue/24/solid'
export default
{
  name: 'botonFormularioRegistro',
  components: { PlusCircleIcon },
  emits: ['cambiarVista'],
}
</script>

<template>
  <button type="button" class='botonUI' @click="$emit('cambiarVista', 'formularioRegistro')">
    <PlusCircleIcon class="iconoUI" />
  </button>
</template>
[=|=|"botonInterfazAceptar.vue"|=|=]
<script>
import { CheckIcon } from '@heroicons/vue/24/solid'
export default
{
  name: 'botonInterfazAceptar',
  components: { CheckIcon },
  emits: ['aceptar'],
}
</script>

<template>
  <button type="button" class='botonUI' @click="$emit('aceptar')">
    <CheckIcon class="iconoUI" />
  </button>
</template>
[=|=|"botonInterfazCancelar.vue"|=|=]
<script>
import { XMarkIcon } from '@heroicons/vue/24/solid'
export default
{
  name: 'botonInterfazCancelar',
  components: { XMarkIcon },
  emits: ['cancelar'],
}
</script>

<template>
  <button type="button" class='botonUI' @click="$emit('cancelar')">
    <XMarkIcon class="iconoUI" />
  </button>
</template>
[=|=|"botonVistaConfiguracion.vue"|=|=]
<script>
import { Cog6ToothIcon } from '@heroicons/vue/24/solid'
export default
{
  name: 'botonVistaConfiguracion',
  components: { Cog6ToothIcon },
  emits: ['cambiarVista'],
}
</script>

<template>
  <button type="button" class='botonUI' @click="$emit('cambiarVista', 'vistaConfiguracion')">
    <Cog6ToothIcon class="iconoUI" />
  </button>
</template>
[=|=|"botonVistaPrincipal.vue"|=|=]
<script>
import { HomeIcon } from '@heroicons/vue/24/solid'
export default
{
  name: 'botonVistaPrincipal',
  components: { HomeIcon },
  emits: ['cambiarVista'],
}
</script>

<template>
  <button type="button" class='botonUI' @click="$emit('cambiarVista', 'vistaPrincipal')">
    <HomeIcon class="iconoUI" />
  </button>
</template>
[=|=|"botonVistaTabla.vue"|=|=]
<script>
import { TableCellsIcon } from '@heroicons/vue/24/solid'
export default
{
  name: 'botonVistaTabla',
  components: { TableCellsIcon },
  emits: ['cambiarVista'],
}
</script>

<template>
  <button type="button" class='botonUI' @click="$emit('cambiarVista', 'vistaTabla')">
    <TableCellsIcon class="iconoUI" />
  </button>
</template>
[=|=|"inputColor.vue"|=|=]
<script>
export default
{
  name: 'inputColor',
  emits: ['update:modelValue'],
  props: 
  {
    colores: { type: Array, default: () => ['ðŸ”´','ðŸŸ ','ðŸŸ¡','ðŸŸ¢','ðŸ”µ','ðŸŸ£','ðŸŸ¤','âš«','âšª'] },
    modelValue: { type: String, default: '' },
  },
  computed:
  {
    valor:
    { 
      get() { return this.modelValue },
      set(nuevo) { this.$emit('update:modelValue', nuevo) },
    },
  },
  methods:
  {
    siguienteEmoji()
    {
      const index = this.colores.indexOf(this.valor)
      const siguiente = this.colores[(index + 1) % this.colores.length]
      this.valor = siguiente
    },
  },
}
</script>

<template>
  <button type="button" class="botonColor" @click="siguienteEmoji">
    <span class="color">{{ valor }}</span>
  </button>
</template>

<style scoped>
.botonColor
{
  position: relative; 
  display: inline-flex; 
  align-items: center; 
  justify-content: flex-start; 
  gap: .5em; 
  padding: .5em .5em; 
  overflow: hidden; 
  border: 1px solid #1b1c1c; 
  border-radius: 8px; 
  background: #3c3c3c; 
  color: #d8dade; 
  font-size: 1rem; 
  cursor: pointer; 
  transition: background 0.2s ease, transform 0.05s ease;
}
.botonColor:hover { background: #4d4c4c; }
.botonColor:active { transform: scale(0.95); }
.color { font-size: 1rem; line-height: 1; }
</style>
[=|=|"inputNumero.vue"|=|=]
<script>
export default
{
  name: 'inputNumero',
  emits: ['update:modelValue'],
  props:
  {
    modelValue: { type: Number, default: 0 },
    placeholder: { type: String, default: '' },
  },
  computed:
  {
    valor:
    {
      get() { return this.modelValue },
      set(nuevo)
      {
        const n = Math.max(1, Math.min(100, Number(nuevo)))
        this.$emit('update:modelValue', n)
      },
    },
  },
}
</script>

<template>
  <input class="input" type="number" v-model.number="valor" :placeholder="placeholder" min="1" max="100" />
</template>

[=|=|"inputRango.vue"|=|=]
<script>
export default
{
  name: 'inputRango',
  emits: ['update:modelValue'],
  props:
  {
    modelValue: { type: Number, default: 0 },
    min: { type: Number, default: 0 },
    max: { type: Number, default: 100 },
  },
  computed:
  {
    internalValue:
    {
      get() { return this.modelValue},
      set(val) { this.$emit('update:modelValue', val) },
    },
  },
}
</script>

<template>
    <input class="rango" type="range"  :min="min" :max="max" v-model.number="internalValue"/>
</template>

<style scoped>
.rango { width: 160px; appearance: none; height: 4px; border-radius: 4px; background: #555; outline: none; cursor: pointer }
</style>
[=|=|"inputSelector.vue"|=|=]
<script>
import { ChevronDownIcon } from '@heroicons/vue/24/solid'
import '../estilos.css'
export default
{
  name: 'inputSelector',
  emits: ['update:modelValue'],
  components: { ChevronDownIcon },
  props:
  {
    modelValue: { type: String, default: '' },
    opciones: { type: Array,  default: () => [] },
    placeholder: { type: String, default: '' },
  },
  computed:
  {
    valor:
    {
      get() { return this.modelValue },
      set(nuevo) { this.$emit('update:modelValue', nuevo) },
    },
  },
}
</script>

<template>
  <div class="inputWRP">
    <select class="input" v-model="valor">
      <option disabled value="">{{ placeholder }}</option>
      <option v-for="opcion in opciones" :key="opcion" :value="opcion">{{ opcion }}</option>
    </select>
    <ChevronDownIcon class="arrow"/>
  </div>
</template>

<style scoped>
.arrow { position: absolute; right: .8em; top: 50%; width: 1rem; height: 1rem; pointer-events: none; transform: translateY(-50%); color: #d8dade; }
</style>
[=|=|"inputString.vue"|=|=]
<script>
export default
{
  name: 'inputString',
  emits: ['update:modelValue'],
  props:
  {
    modelValue: { type: String, default: '' },
    placeholder: { type: String, default: '' },
  },
  computed:
  {
    valor:
    {
      get() { return this.modelValue },
      set(nuevo) { this.$emit('update:modelValue', nuevo) },
    },
  },
}
</script>

<template>
  <input class="input" type="text" v-model="valor" :placeholder="placeholder" />
</template>
[=|=|"inputToggle.vue"|=|=]
<script>
export default
{
  name: 'inputToggle',
  props:
  {
    modelValue: { type: Boolean, default: false }
  },
  emits: ['update:modelValue'],
  computed:
  {
    valor:
    {
      get() { return this.modelValue },
      set(nuevo) { this.$emit('update:modelValue', nuevo) },
    },
  },
  methods:
  {
    alternar() { this.valor = !this.valor },
  },
}
</script>

<template>
  <div class="toggle" @click="alternar" :class="{ activo: valor }">
    <div class="circulo" />
  </div>
</template>

<style scoped>
.toggle { width: 44px; height: 24px; border-radius: 999px; background: #1b1c1c; border: 1px solid #1b1c1c; display: flex; align-items: center; cursor: pointer; transition: all 0.2s ease; padding: 2px }
.toggle .circulo { width: 18px; height: 18px; border-radius: 50%; background: #d8dade; transition: transform 0.2s ease }
.toggle.activo { background: #4C9AFF; border-color: #4C9AFF }
.toggle.activo .circulo { transform: translateX(20px); background: #1b1c1c }
</style>
